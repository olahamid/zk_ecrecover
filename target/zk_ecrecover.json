{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":18322899744094261095,"abi":{"parameters":[{"name":"pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"arr_signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"message_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"expected_address","type":{"kind":"field"},"visibility":"private"},{"name":"F_r_signature_div16","type":{"kind":"field"},"visibility":"private"},{"name":"F_s_signature_div16","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"boolean"},{"kind":"field"}]},"visibility":"public"},"error_types":{"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7498245299657948784":{"error_kind":"string","string":"address checked sucessfully!"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7Z3dattKFIXfxde+0Mz+mZm8yqEUJ3GLwTjBSQ4cQt79yIllx93CYdNOpQVzU6pmRnt5LabfUkuU18X9+vbl5/fN7sfD0+Lmn9fF9uFu9bx52PVXr4ug3fsfPj2udofrp+fV/nlxIymV5WK9u+9/m7vytlz82GzXixsNb0uzOJQYjotDEbq+WBINNy7n+4b89m3Ziwl/QExOx8Wx674Qo6UblGsJ6bMcuzhH5uPiHDUa7RFYOwFrZ2DtAqxdgbUnYO0ZWHvB1Z46YO3jXM3CJ+2Zr8uJpRvAHUsof1F7BNZOwNoZWLsAa1dg7QlYewbWXnC15w5Y+zhXSxkwr52E63JISY6LSflC+/uEWH0CVZ/A1SdI9QlafUKqPiFXn1BqTyhd9QnVz3SpfqZL9TNdqp/pUv1Ml+pnulQ/06X6mS61z3T/KFx9Qqg+IVafQNUncPUJUn2CVp+Qqk/I1SdUP9Oh+pkO1c90qH6mw+iZ1hTjMCGVL/6ZMPLp0UfODzOHRxWzNITz/9P1AZ0X04cY/pNiPj+zxY/7y2/fn7phLcXuiw9LOsQUuLv4sCOLUx6E98/Sel6sH8oVVnmCVZ5hlRdU5bGDVR5glUdY5QSrnGGVwzI0wjI0wjI0wjI0wjKUYBlKsAwlWIYSLEMJlqEEy1CCZSjBMpRgGUqwDGVYhjIsQxmWoQzLUIZlKMMylGEZyrAMZViGMixDBZahAstQgWWowDJUYBkqsAwVWIYKLEMFlqECy1CFZajCMlRhGaqwDFVYhiosQxWWoQrLUIVlqMIyNMEyNMEyNMEyNMEyNMEyNMEyNMEyNMEyNMEyNMEyNMMyNMMyNMMyNMMyNMMyNMMyNMMyNM+Xof3fHsN3WvXHsRjl82Uo9XXwdOMSPiu3i4WpOy4W5nNAo6/SSCUMb8rqP93FezfePZkvnSfzpMyX+9N5Mt9GMZ0n8+0q03ky3xY0nSfcPDGezLe5TefJfDvhdJ7Mt21O50nrsdaT1mN/9YS61mOtJ63HWk9aj7WetB5rPeHmifGk9VjrSeux1pPWY60nrcdaT1qPNZ6E1mOtJ63HWk9aj7WetB5rPeHmifGk9VjrSeux1pPWY60nrcdaT1qPNZ7M+D2f03nSeqz1pPVY60nrsdYTbp4YT1qPtZ60Hms9aT3WejLeY3M3TNAc43VPiuhxbcn5tDSWj/uPd8J8+lkNmvXi/t/6i9v9Zrvd/Px+8ePTu8Mv449n1xSMP7xc3ZHdO4p3x3gtvLojuHdE9w5y72D3DnHvcGce3ZlHd+bRnTm5Myd35uTOnNyZkztzcmdO7szJnTm5Myd35uzOnN2ZsztzdmfO7szZnTm7M2d35uzOnN2ZiztzcWcu7szFnbm4Mxd35uLOXNyZiztzcWeu7szVnbm6M1d35uOvp8lhaL2Z5dcd4t6hvh1v/dW/q/1mdbtdH5rg4Ysvu7uhGPaXz/89Dl8ZquPj/uFuff+yXx9K5Kf+eMhJ8zJRf9v+1v8D","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"\n \n    // n: /*curved order*/ = 115792089237316195423570985008687907852837564279074904382605163141518161494337\n     // e then we can check that s <= n/2\n    // use packbyte to mve from array to feild \n    //let n_halfed = ; // secp256k1 order\n    // SECp256k1 curve order in decimal\nuse dep::ecrecover;\nuse std::static_assert;\n// not needed again as i didn't change t\n//use nodash::pack_bytes;\n\n///----data---///\nstruct ecr_values {\n    byte_r: [u8; 32],\n    byte_s: [u8; 32],\n    signature_sig: [u8; 64],\n    feild_s : Field,\n    halfN: Field,\n    // log_r: Field,\n    // log_s: Field,\n}\ntrait do_ECR_computation {\n    fn sig_parts_to_array(&mut self, is_s_part: bool) -> [u8; 32];\n    fn is_s_less_than_half_n(_s: [u8; 32], _n: [u8; 32]) -> bool;\n    /* todo i want to have something like an enum functionality that say the var that is beingpassed in the function below\n    if the enum is r it stores it in the ecr_values.byte_r, s it stores it in ecr_values.byte_s, and sig it stores it in ecr_values.signature_sig.\n    */\n    fn compute_field_to_array(_f: Field) -> [u8; 32]; \n}\n\n\nimpl do_ECR_computation for ecr_values {\n    fn sig_parts_to_array(&mut self, is_s_part: bool) -> [u8; 32] {\n\n        // the goal here is to convert the sig_parts struct into a byte array of 32 bytes\n        // if ((self.part0 != self.part1) | (self.part2 != self.part3) | (self.part0 != self.part2)) {\n        //     static_assert(false, \"part0 and part1 must be equal\");\n        // }\n        // assuming part is divided into equal 16 parts\n        let mut total_bytes: [u8; 32] = [0; 32];\n        if (is_s_part == true) {\n            let part = self.feild_s;\n        \n            let mut arr_part0: [u8; 8] = [0; 8];\n            let mut arr_part1: [u8; 8] = [0; 8];\n            let mut arr_part2: [u8; 8] = [0; 8];\n            let mut arr_part3: [u8; 8] = [0; 8];\n            // ensure that each part is less than 64 bits\n            self.feild_s.assert_max_bit_size::<64>();\n            arr_part0 = part.to_be_bytes();\n            arr_part1 = part.to_be_bytes();\n            arr_part2 = part.to_be_bytes();\n            arr_part3 = part.to_be_bytes();\n            for i in 0..8 {\n                total_bytes[i] = arr_part0[i];\n            }\n\n            for i in 0..8 {\n                total_bytes[i + 8] = arr_part1[i];\n            }\n            for i in 0..8 {\n                total_bytes[i + 16] = arr_part2[i];\n            }\n            for i in 0..8 {\n                total_bytes[i + 24] = arr_part3[i];\n            }\n        } else {\n            let part = self.halfN;\n        \n            let mut arr_part0: [u8; 8] = [0; 8];\n            let mut arr_part1: [u8; 8] = [0; 8];\n            let mut arr_part2: [u8; 8] = [0; 8];\n            let mut arr_part3: [u8; 8] = [0; 8];\n            // ensure that each part is less than 64 bits\n            self.feild_s.assert_max_bit_size::<64>();\n            arr_part0 = part.to_be_bytes();\n            arr_part1 = part.to_be_bytes();\n            arr_part2 = part.to_be_bytes();\n            arr_part3 = part.to_be_bytes();\n            for i in 0..8 {\n                total_bytes[i] = arr_part0[i];\n            }\n\n            for i in 0..8 {\n                total_bytes[i + 8] = arr_part1[i];\n            }\n            for i in 0..8 {\n                total_bytes[i + 16] = arr_part2[i];\n            }\n            for i in 0..8 {\n                total_bytes[i + 24] = arr_part3[i];\n            }\n        }\n        total_bytes \n    }\n    fn is_s_less_than_half_n(_s: [u8; 32], h_n:[u8; 32]) -> bool {\n        // check that _s <= _n/2\n        let mut result = true;\n        for i in 0..32 {\n            if (_s[i] < h_n[i]) {\n                result = true; // s is less than n/2\n                \n            } else if (_s[i] > h_n[i]) {\n                result = false; // s is greater than n/2\n            }  \n        }\n        true \n    }\n    \n    fn compute_field_to_array(_f: Field) -> [u8; 32] {\n        static_assert( _f  != 0 , \"Field must be greater than 0\");\n        _f.to_be_bytes()\n    }\n    // fn compute_array_to_field(_arr: [u8; 32]) -> Field {\n    //     let _f = pack_bytes(_arr);\n    //     _f[0]\n    //     // solidty is 2^256 max while noir max is 2^64\n    //     //  curve order for \n    // }\n}\n// impl do_ecrecover_check for ecr_values {\n    \n// }\n///----implementation---///\n/** \n*/\nfn main(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    mut arr_signature: [u8; 64],\n    message_hash: [u8; 32],\n    expected_address: Field,\n    F_r_signature_div16: Field,\n    F_s_signature_div16: Field,\n) -> pub (bool, Field) {\n    let mut if_arr_used: bool = false;\n    // check if the r and s sig is more that zero hence want to use  ininteger in checking the value result  \n    if ((F_r_signature_div16 == 0) | (F_s_signature_div16 == 0)) {\n        if_arr_used = false;\n    }\n    // secp256k1 curve order\n    let mut arr_curved_order: [u8; 32] = [\n    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,\n    0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B,\n    0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36, 0x41, 0x41, \n    ];\n    // used to convert Field to array then do the check in array/byte\n    let curved_order_div16: Field = 7237005577332262213973186563042993990802347767442181523912822696344885093396;\n\n    let mut _ecr_values = ecr_values {\n        byte_r: [0; 32],\n        byte_s: [0; 32],\n        signature_sig: [0; 64],\n        feild_s : 0,\n        halfN: 0\n         // n/2\n    };\n    _ecr_values.feild_s = F_s_signature_div16;\n    _ecr_values.halfN = curved_order_div16;\n\n    // step1- spit the signature into r and s\n    let mut r: [u8; 32] = [0; 32];\n    let mut s: [u8; 32] = [0; 32];\n\n    let mut is_valid = false;\n    if (if_arr_used == false) {\n        let _Field_to_arr_SigS = _ecr_values.sig_parts_to_array(true);\n        let _field_to_arr_SigHALFN = _ecr_values.sig_parts_to_array(false );\n        s = _Field_to_arr_SigS;\n        arr_curved_order = _field_to_arr_SigHALFN;\n\n        is_valid = ecr_values::is_s_less_than_half_n(s, arr_curved_order);\n    }\n    else {\n            for i in 0..32 {\n            r[i] = arr_signature[i]; // first 32 bytes of signature is r\n            s[i] = arr_signature[i + 32]; // last 32 bytes of signature is s\n        }  \n        // note that the second param represention curved order value passed in the function below\n        //let is_valid = _ecr_values.is_s_less_than_half_n(s, curved_order_div2);\n        is_valid = ecr_values::is_s_less_than_half_n(s, arr_curved_order);\n    }\n    for i in 0..32 {\n        _ecr_values.signature_sig[i] = r[i];\n        _ecr_values.signature_sig[i + 32] = s[i];\n    }\n\n\n    _ecr_values.byte_s = s;\n    _ecr_values.byte_r = r;\n\n    let address = ecrecover::ecrecover(pub_key_x, pub_key_y, arr_signature, message_hash);\n\n    std::println( address);\n    assert(expected_address == address, \"address checked sucessfully!\");\n    assert(is_valid == true, \"valid message is false\");\n\n    (is_valid, expected_address)\n}\n\n// #[test]\n// fn test_main() {\n//     main(1, 2);\n\n//     // Uncomment to make test fail\n//     // main(1, 1);\n// }\n","path":"/home/olahamid04/ZK/NOIR/zk_ecrecover/src/main.nr"},"62":{"source":"mod secp256k1;\n\npub fn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32]\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/home/olahamid04/nargo/github.com/colinnielsen/ecrecover-noir/v1.0.0/src/lib.nr"},"63":{"source":"use dep::keccak256;\nuse dep::array_helpers;\n\npub struct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nfn split_uncompressed_pub_key(\n    pub_key: [u8; 65]\n) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    };\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    pub fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey {\n            pub_x,\n            pub_y,\n        }\n    }\n\n    pub fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    pub fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    pub fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    pub fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64(self.pub_x, self.pub_y);\n        let hashed_pub_key = keccak256::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(\n        self,\n        signature: [u8; 64],\n        hashed_message: [u8; 32]\n    ) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/home/olahamid04/nargo/github.com/colinnielsen/ecrecover-noir/v1.0.0/src/secp256k1.nr"},"66":{"source":"mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n","path":"/home/olahamid04/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr"}},"names":["main"],"brillig_names":["print_unconstrained","directive_to_radix","directive_integer_quotient","directive_invert"]}