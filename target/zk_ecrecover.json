{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":5671474703040319987,"abi":{"parameters":[{"name":"pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"hashed_message","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"expected_address","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"boolean"},{"kind":"field"}]},"visibility":"public"},"error_types":{"4749531823446843009":{"error_kind":"string","string":"the signature is not safe: s> n"},"11314778477572923411":{"error_kind":"string","string":"resulting address is not the same as expecte address"}}},"bytecode":"","debug_symbols":"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","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"61":{"source":"/// @author - Ola Hamid\n/// @Title - zk_ecrecover\n/// @notice -  implemented an ECDSA signature verification system using Noir, with a specific focus on mitigating signature malleability and replay attacks.\n/// n: /*curved order*/ = 115792089237316195423570985008687907852837564279074904382605163141518161494337\n    /// e then we can check that s <= n/2\n    /// e SECp256k1 used as curve order in decimal(as it's mainly used in Cryptography elliptic curves)\nuse dep::ecrecover;\n// not needed again as i didn't change feild to array n the main branch\n//use nodash::pack_bytes;\n//----constant----//\n// SECP256K1 CURVE ORDER N\nfn _get_cover_order() -> ([u8; 32]) {\n    let CURVE_ODER: [u8; 32] = [ \n        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,\n        0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B,\n        0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36, 0x41, 0x41,\n    ];\n    (CURVE_ODER)\n}\nfn get_half_cover_order() -> ([u8; 32]) {\n    let HALF_CURVE_ORDER: [u8; 32] = [\n        0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n        0x5D, 0x57, 0x6E, 0x73, 0x57, 0xA4, 0x50, 0x1D,\n        0xDF, 0xE9, 0x2F, 0x46, 0x68, 0x1B, 0x20, 0xA0\n    ];\n\n    HALF_CURVE_ORDER\n}\n\n//----data----//\nstruct EcrValue {\n    signature_r: [u8; 32],\n    signature_s: [u8; 32],\n    full_signature: [u8; 64],\n    half_n: [u8; 32],\n    full_n: [u8; 32],\n}\n\n//----Effect----//\ntrait compute_Ecrecover {\n    fn extract_signature_values(&mut self, sig: [u8; 64]);\n    fn is_signature_safe(&mut self) -> bool;\n}\n\nimpl compute_Ecrecover for EcrValue {\n    fn extract_signature_values(\n        &mut self, \n        sig: [u8; 64]) \n    {\n        \n        for i in 0..32 {\n            self.signature_r[i] = sig[i];\n            self.signature_s[i] = sig[i + 32];\n        }\n        // store the total sig in the struct \n        self.full_signature = sig;\n        // store the total to the half cover order\n        self.half_n = get_half_cover_order();\n\n        // store the total to the full coveer order\n        self.full_n = _get_cover_order();\n    }\n    \n    fn is_signature_safe(\n        &mut self\n    ) -> bool {\n\n        let s = self.signature_s;\n        let n_half = self.half_n;\n        let mut is_safe = false;\n        let mut is_break = false;\n        // compare s with n_half byte by byte \n        for i in 0..32 {\n            if (is_break == false) {\n                if (s[i] < n_half[i]) {\n                    is_safe =  true;\n                    is_break = true; \n                } else if(s[i] > n_half[i]) {\n                    is_safe = false;\n                    is_break = true;\n                }\n            // if the the both bytes are equal coninue to the next bytes\n            }\n        }\n        is_safe\n    }\n\n}   \n\nfn main (\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // r and s components concatenated\n    hashed_message: [u8; 32],\n    expected_address: Field, \n) -> pub ( bool, Field) {\n    \n    //get_cover_order();\n    let mut _ecr_values = EcrValue {\n        signature_r: [0; 32],\n        signature_s: [0; 32],\n        full_signature: [0; 64],\n        half_n: [0; 32],\n        full_n: [0; 32],\n    };\n    // setting data value.\n    _ecr_values.extract_signature_values(signature);\n\n    // making effect\n    let is_safe = _ecr_values.is_signature_safe();\n    \n    let address: Field = ecrecover::ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(is_safe, \"the signature is not safe: s> n\");\n    assert(address == expected_address, \"resulting address is not the same as expecte address\");\n\n    (is_safe, address)\n    \n}\n\n\n\n\n// use dep::ecrecover;\n// //use std::static_assert;\n// fn main(\n//     pub_key_x: [u8; 32],\n//     pub_key_y: [u8; 32],\n//     signature: [u8; 64], // r and s components concatenated\n//     hashed_message: [u8; 32],\n//     expected_address: Field // The Ethereum address derived from the public key\n// ) {\n//     // The ecrecover function attempts to recover an Ethereum address\n//     // from the public key, signature, and hashed message.\n//     // The 'false' argument indicates an Ethereum non-prefixed hash.\n//     let address: Field = ecrecover::ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    \n//     // Assert that the recovered address matches the expected address.\n//     // If they don't match, the proof will fail.\n//     assert(address == expected_address, \"Address does not match expected address\");\n// }\n","path":"/home/olahamid04/ZK/zk_ecrecover/src/main.nr"},"62":{"source":"mod secp256k1;\n\npub fn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32]\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/home/olahamid04/nargo/github.com/colinnielsen/ecrecover-noir/v1.0.0/src/lib.nr"},"63":{"source":"use dep::keccak256;\nuse dep::array_helpers;\n\npub struct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nfn split_uncompressed_pub_key(\n    pub_key: [u8; 65]\n) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    };\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    pub fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey {\n            pub_x,\n            pub_y,\n        }\n    }\n\n    pub fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    pub fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    pub fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    pub fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64(self.pub_x, self.pub_y);\n        let hashed_pub_key = keccak256::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(\n        self,\n        signature: [u8; 64],\n        hashed_message: [u8; 32]\n    ) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/home/olahamid04/nargo/github.com/colinnielsen/ecrecover-noir/v1.0.0/src/secp256k1.nr"},"66":{"source":"mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n","path":"/home/olahamid04/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert","directive_to_radix"]}