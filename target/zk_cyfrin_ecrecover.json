{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":13557665910311920018,"abi":{"parameters":[{"name":"pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"message_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"expected_address","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"7498245299657948784":{"error_kind":"string","string":"address checked sucessfully!"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7Z3bSiNREEX/pZ/zcE7VueZXBpGoUQIhkRgHBsm/Tyemc6k0GYoRujfUi9imTltZG1wbofWreZk/fb49Llav649m+uurWa6fZ9vFetVefTU+ucMXP95nq/31x3a22TZTX/Okma9emimlsJs0r4vlvJkmv5vcjFLgbjTm8yj1jHpP/jjbfubOw7x7mLSr+J9bpYTLVQ53p/+8Ozs6jjK5f7xRTt1tfXBXb7RnOJdubZ9rOg+n770ZdO8AuncE3TuB7p1B9y6ge1fMvbMD3duD7g3qywzqywzqywzqywzqywzqywzqywzqywLqywLqywLqywLqywLqywLqywLqywLqywLqywLqywrqywrqywrqywrqywrqywrqywrqywrqywrqy4rpS3KYviSH6UtymL4kh+lLcpi+JIfpS3KYviSH6UtymL4kB+pLD+pLD+pLD+pLD+pLD+pLD+pLD+pLD+pLD+pLD+pLAvUlgfqSQH1JoL4kUF8SqC8J1JcE6ksC9SWB+pJBfcmgvmRQXzKoL3msvqRyeqqJCtebvcfqS6YcTzeu/nLv2+EY2B2HYwjncHzpGc7V1+Nwrpwvhw9Exmri4YiM1fHDERlrexiOyFh7yWBEwlgbz3BExtqlhiMy1pY2HJGx9r/hiAQjIohYZ5VErLNKItZZJRHrrJKIdVZBJFpnlUSss0oi1lklEeuskkgwIoKIdVZJxDqrJGKdVRKxziqJWGcVRJJ1VknEOqskYp1VErHOKokEIyKIWGeVRKyzSiLWWSUR66ySiHVWQWS0fy10OCLWWSUR66ySiHVWSSQYEUGkt7O2P3A7IpXuE6kxHUdrKadRqt937+1/7E7vla/u/tBePG0Wy+Xi7fHq/xq4/Yf+RyTvff/+hxPvnijqE1V7ov9RuLsnvPoEqU+w+kRQn4jqE+rMSZ05qTMndeaszpzVmbM6c1ZnzurMWZ05qzNndeaszpzVmQd15kGdeVBnHtSZB3XmQZ15UGce1JkHdeZBnXlUZx7VmUd15lGdeVRnHtWZR3XmUZ15VGce1ZkndeZJnXlSZ57Umff/Qrf4rvGWEOWJqD6RdCd27dXv2WYxe1rO901w/+Ln6rkrhu3l9s9790pXHd836+f5y+dmvi+RF/1xn1Mqk8ztbdtb/wU=","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"use dep::ecrecover;\n\nfn main(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64],\n    message_hash: [u8; 32],\n    expected_address: Field,\n) -> pub Field {\n    let address = ecrecover::ecrecover(pub_key_x, pub_key_y, signature, message_hash);\n    std::println( address);\n    assert(expected_address == address, \"address checked sucessfully!\");\n\n    address\n}\n\n// #[test]\n// fn test_main() {\n//     main(1, 2);\n\n//     // Uncomment to make test fail\n//     // main(1, 1);\n// }\n","path":"/home/olahamid04/ZK/NOIR/zk_cyfrin_ecrecover/src/main.nr"},"62":{"source":"mod secp256k1;\n\npub fn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32]\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/home/olahamid04/nargo/github.com/colinnielsen/ecrecover-noir/v1.0.0/src/lib.nr"},"63":{"source":"use dep::keccak256;\nuse dep::array_helpers;\n\npub struct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nfn split_uncompressed_pub_key(\n    pub_key: [u8; 65]\n) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    };\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    pub fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey {\n            pub_x,\n            pub_y,\n        }\n    }\n\n    pub fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    pub fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    pub fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    pub fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64(self.pub_x, self.pub_y);\n        let hashed_pub_key = keccak256::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(\n        self,\n        signature: [u8; 64],\n        hashed_message: [u8; 32]\n    ) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/home/olahamid04/nargo/github.com/colinnielsen/ecrecover-noir/v1.0.0/src/secp256k1.nr"},"66":{"source":"mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n","path":"/home/olahamid04/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr"}},"names":["main"],"brillig_names":["print_unconstrained","directive_integer_quotient","directive_invert","directive_to_radix"]}